<?php

namespace Tests\Feature;

use Tests\TestCase;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;

class RoleTest extends TestCase
{
    use DatabaseTransactions,DatabaseMigrations;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $content = $this->signUp();
        //$this->signIn();
        $this->assertObjectHasAttribute('access_token', $content);
        $this->token = $content->access_token;
    }

    public function testCreate()
    {
        $headers['Authorization'] = 'Bearer '. $this->token;
        $response = $this->json('POST','api/roles',[
            'name'          =>  'admin',
            'display_name'  =>  'Administrator',
            'description'   =>  'Role to Administrator'
        ],$headers);
        $response->assertStatus(200)
            ->assertJsonStructure([
                'data' =>[
                    'id',
                    'name',
                    'created_at',
                    'updated_at'
                ]
            ]);
    }

    public function testCreateFailedRequests()
    {

        $headers['Authorization'] = 'Bearer '. $this->token;
        $this->json('POST','api/roles',['name'=>'co'],$headers)
            ->assertStatus(422)
            ->assertSee('The name must be at least 3');

        $this->json('POST','api/roles',[
                'name'          =>  'owner',
                'display_name'  =>  'ow',
                'description'   =>  'Role to Administrator'
            ],$headers)
            ->assertStatus(422)
            ->assertSee('The display name must be at least 3');

        $this->json('POST','api/roles',[
            'name'          =>  'owner',
            'display_name'  =>  'ow',
            'description'   =>  'Ro'
        ],$headers)
            ->assertStatus(422)
            ->assertSee('The description must be at least 3');
    }

    public function testGetAll()
    {
        $this->testCreate();
        $headers['Authorization'] = 'Bearer '. $this->token;
        $response = $this->json('GET','api/roles',[],$headers)
            ->assertStatus(200)
            ->assertJsonStructure([
                'data' => [
                    '*'=>[
                        'id','name','created_at','updated_at'
                    ]
                ]
            ]);
    }

    public function testDelete()
    {
        $this->testCreate();
        $headers['Authorization'] = 'Bearer '. $this->token;
        $this->json('DELETE','api/roles/1',[],$headers)
            ->assertStatus(200)
            ->assertJson(['message'=>'Successfull']);
    }

    public function testDeleteFailed()
    {
        $headers['Authorization'] = 'Bearer '. $this->token;
        $this->json('DELETE','api/roles/4',[],$headers)
            ->assertStatus(400);
    }

    public function testUpdate()
    {
        $this->testCreate();
        $headers['Authorization'] = 'Bearer '. $this->token;
        $this->json('PATCH','api/roles/1',['display_name'=>'General Administrator'],$headers)
            ->assertStatus(200)
            ->assertSee('General Administrator');
    }
    public function testUpdateFailed()
    {
        $headers['Authorization'] = 'Bearer '. $this->token;


        $this->json('PATCH','api/roles/2',['name'=>'co'],$headers)
            ->assertStatus(422)
            ->assertSee('The name must be at least 3');

        $this->json('PATCH','api/roles/2',[
            'name'          =>  'owner',
            'display_name'  =>  'ow',
            'description'   =>  'Role to Administrator'
        ],$headers)
            ->assertStatus(422)
            ->assertSee('The display name must be at least 3');

        $this->json('PATCH','api/roles/2',[
            'name'          =>  'owner',
            'display_name'  =>  'ow',
            'description'   =>  'Ro'
        ],$headers)
            ->assertStatus(422)
            ->assertSee('The description must be at least 3');

    }
}
