<?php

namespace Tests\Feature;

use Tests\TestCase;
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;

class CategoryTest extends TestCase
{
    use DatabaseTransactions,DatabaseMigrations;

    private $categories;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $content = $this->signUp();
        //$this->signIn();
        $this->assertObjectHasAttribute('access_token', $content);
        $this->token = $content->access_token;


        $faker = \Faker\Factory::create();

        for ($i = 0; $i < mt_rand(100, 1000); $i++) {
            $this->categories[] = \App\Domains\Categories\Category::create([
                'name' => $faker->name
            ]);
        }

        $this->assertTrue(count($this->categories) >= 100);
    }

    public function testCreate()
    {
        $headers['Authorization'] = 'Bearer '. $this->token;
        $this->json('POST','api/categories',['name'=>'comida'],$headers)
            ->assertStatus(200)
            ->assertJsonStructure([
                'data' =>[
                    'id',
                    'name',
                    'created_at',
                    'updated_at'
                ]
            ]);
    }

    public function testCreateFailed()
    {
        //TODO: create test to api token
        /*$headers['Authorization'] = 'Bearer '. $this->token;
        $this->json('POST','api/categories',['name'=>'comida'])
            ->assertStatus(401)
            ->assertSee('Token not provided');
        */
        $headers['Authorization'] = 'Bearer '. $this->token;
        $this->json('POST','api/categories',['name'=>'co'],$headers)
            ->assertStatus(422)
            ->assertSee('The name must be at least 3');
    }

    public function testGetAll()
    {
        $headers['Authorization'] = 'Bearer '. $this->token;
        $response = $this->json('GET','api/categories',[],$headers)
            ->assertStatus(200)
            ->assertJsonStructure([
                'data' => [
                    '*'=>[
                    'id','name','created_at','updated_at'
                    ]
                ]
            ]);
    }

    public function testDelete()
    {
        $headers['Authorization'] = 'Bearer '. $this->token;
        $this->json('DELETE','api/categories/1',[],$headers)
            ->assertStatus(200)
            ->assertJson(['message'=>'Successful']);
    }

    public function testUpdate()
    {
        $headers['Authorization'] = 'Bearer '. $this->token;
        $this->json('PATCH','api/categories/3',['name'=>'casa'],$headers)
            ->assertStatus(200)
            ->assertJson([
                'data' =>[
                    'id'=>3,
                    'name'=>'casa'
                ]
            ]);
    }

    public function testUpdateFailed()
    {
        $headers['Authorization'] = 'Bearer '. $this->token;
        $this->json('PATCH','api/categories/3',['name'=>'ca'],$headers)
            ->assertStatus(422)
            ->assertSee('The name must be at least 3');
    }


}
